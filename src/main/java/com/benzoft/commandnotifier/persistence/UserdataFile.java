package com.benzoft.commandnotifier.persistence;

import com.benzoft.commandnotifier.PluginPermission;
import com.benzoft.commandnotifier.persistence.persistenceobjects.Userdata;
import lombok.Getter;
import org.bukkit.Bukkit;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerQuitEvent;

import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

@Getter
public final class UserdataFile extends AbstractFile implements Listener {

    private static final UserdataFile INSTANCE = new UserdataFile();

    private Map<UUID, Userdata> userdata;

    private UserdataFile() {
        super("userdata.yml");
    }

    public static UserdataFile getInstance() {
        return INSTANCE;
    }

    public Optional<Userdata> getUserdata(final UUID uuid, final boolean createIfNotExists) {
        return createIfNotExists ? Optional.of(userdata.computeIfAbsent(uuid, this::createUserData)) : Optional.ofNullable(userdata.get(uuid));
    }

    private Userdata createUserData(final UUID uuid) {
        return new Userdata(getConfig().createSection("Userdata." + uuid.toString()));
    }

    @Override
    public void setDefaults() {
        setHeader(
                "This file contains userdata.",
                "",
                "Do not edit this file manually unless you know exactly what you're doing.",
                ""
        );
        userdata = new HashMap<>();
        userdata.putAll(Bukkit.getOnlinePlayers().stream().map(player -> {
            if ((PluginPermission.NOTIFIABLE.checkPermission(player) || player.isOp() && ConfigFile.getInstance().isNotifyOpsByDefault()) && !getConfig().contains("Userdata." + player.getUniqueId()))
                createUserData(player.getUniqueId());
            return getConfig().getConfigurationSection("Userdata." + player.getUniqueId());
        }).filter(Objects::nonNull).map(Userdata::new).collect(Collectors.toMap(Userdata::getUuid, Function.identity())));
    }

    @EventHandler(priority = EventPriority.LOW) // Execute before the PlayerJoinListener.
    public void onPlayerJoin(final PlayerJoinEvent event) {
        final UUID uuid = event.getPlayer().getUniqueId();
        final ConfigurationSection configurationSection = getConfig().getConfigurationSection("Userdata." + uuid);
        if (configurationSection != null) {
            userdata.put(uuid, new Userdata(configurationSection));
        } else if (PluginPermission.NOTIFIABLE.checkPermission(event.getPlayer()) || event.getPlayer().isOp() && ConfigFile.getInstance().isNotifyOpsByDefault()) {
            userdata.put(uuid, createUserData(uuid));
        }
    }

    @EventHandler
    public void onPlayerLeave(final PlayerQuitEvent event) {
        final Userdata remove = userdata.remove(event.getPlayer().getUniqueId());
        if (remove != null) {
            if (PluginPermission.NOTIFIABLE.checkPermission(event.getPlayer()) || event.getPlayer().isOp() && ConfigFile.getInstance().isNotifyOpsByDefault()) {
                remove.setLastLogout(System.currentTimeMillis());
            } else getConfig().set("Userdata." + event.getPlayer().getUniqueId(), null);
        }
    }
}
